name: Production Deployment
on:
  push:
    branches: [deployment]
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: "ntubot github deployment secrets"
    steps:
      - uses: actions/checkout@v2
      - name: Configuring AWS credentials.
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR.
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag and Push ntubot image to Amazon ECR.
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ntubot
          IMAGE_TAG: latest
        run: |
          cd src
          docker build -t $ECR_REPOSITORY .
          aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, Tag and Push ntuapi image to Amazon ECR.
        id: build-image-api
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ntuapi
          IMAGE_TAG: latest
        run: |
          cd src
          docker build -t $ECR_REPOSITORY .
          aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Importing required files into EC2 instance.
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.DEPLOYMENT_HOST}}
          username: ${{secrets.DEPLOYMENT_USER}}
          key: ${{secrets.DEPLOYMENT_PEM}}
          port: ${{secrets.DEPLOYMENT_PORT}}
          source: "docker-compose.yaml"
          target: "."

      - name: Pulling ECR for updates and instantiating new updated containers.
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.DEPLOYMENT_HOST}}
          username: ${{secrets.DEPLOYMENT_USER}}
          key: ${{secrets.DEPLOYMENT_PEM}}
          port: ${{secrets.DEPLOYMENT_PORT}}
          script: |
            aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 300237359268.dkr.ecr.ap-southeast-1.amazonaws.com 
            docker pull 300237359268.dkr.ecr.ap-southeast-1.amazonaws.com/ntubot:latest
            docker pull 300237359268.dkr.ecr.ap-southeast-1.amazonaws.com/ntuapi:latest
            docker-compose up -d
            docker system prune -f
